par(mfrow=c(1,1))
colors <- (map[,4]-max(map[,4]))/max(abs(map[,4]))+1
plot(map[,1], map[,2], cex=colors)
colnames(map)
plot(map[,1], map[,2], cex=colors, xlab=expression(alpha))
par(mfrow=c(1,1))
plot(chain[,1], chain[,2], xlab=expression(alpha), ylab=expression(beta))
par(mfrow=c(1,1))
colors <- (map[,4]-max(map[,4]))/max(abs(map[,4]))+1
plot(map[,1], map[,2], cex=colors, xlab=expression(alpha), ylab=expression(beta))
# Plot trace
par(mfrow=c(1,1))
plot(chain[,1], chain[,2], xlab=expression(alpha), ylab=expression(beta))
title("Accepted samples")
par(mfrow=c(1,1))
colors <- (map[,4]-max(map[,4]))/max(abs(map[,4]))+1
plot(map[,1], map[,2], cex=colors, xlab=expression(alpha), ylab=expression(beta))
title("Explored samples")
# Plot trace
par(mfrow=c(2,1))
plot(chain[,1], chain[,2], xlab=expression(alpha), ylab=expression(beta))
title("Accepted samples")
colors <- (map[,4]-max(map[,4]))/max(abs(map[,4]))+1
plot(map[,1], map[,2], cex=colors, xlab=expression(alpha), ylab=expression(beta))
title("Explored samples")
source('~/Documents/PhD/Thread_prediction/main_realdata.r')
driver <- dbDriver("SQLite")
source('~/Documents/PhD/Thread_prediction/main_realdata.r')
source('~/Documents/PhD/Thread_prediction/main_realdata.r')
driver <- dbDriver("SQLite")
con <- dbConnect(driver, dbname=dbpath);
setwd("~/Documents/PhD/Thread_prediction/R")
source('~/Documents/PhD/Thread_prediction/R/main_realdata.r')
source('~/Documents/PhD/Thread_prediction/R/main_realdata.r')
source('~/Documents/PhD/Thread_prediction/R/main_realdata.r')
source('~/Documents/PhD/Thread_prediction/R/main_realdata.r')
source('~/Documents/PhD/Thread_prediction/R/main_realdata.r')
source('~/Documents/PhD/Thread_prediction/R/main_realdata.r')
threads[t,]
source('~/Documents/PhD/Thread_prediction/R/main_realdata.r')
source('~/Documents/PhD/Thread_prediction/R/main_realdata.r')
t
nthreads
source('~/Documents/PhD/Thread_prediction/R/main_realdata.r')
source('~/Documents/PhD/Thread_prediction/R/main_realdata.r')
idx
trees
source('~/Documents/PhD/Thread_prediction/R/main_realdata.r')
source('~/Documents/PhD/Thread_prediction/R/main_realdata.r')
traceback()
source('~/Documents/PhD/Thread_prediction/R/main_realdata.r')
library(igraph)
library(RSQLite)
source("./utils/extract_from_db.r")
par(mfrow=c(4,3))
nthreads <- 100
MIN_LENGTH <- 50
# Load trees
################################
dataset <- "reddit"
dbpath =  paste0("../data/", dataset, ".db")
driver <- dbDriver("SQLite")
#query <- paste0("select * from threads limit(1000)")
query <- paste0("select * from threads where forum='podemos'")
threads <- dbGetQuery(con, query)
nthreads <- min(nthreads, nrow(threads))
trees <- vector("list", nthreads)
idx <- 1
t <- 1
threadid <- threads[t,]$threadid
g <- database.to.graph(threadid, con, dataset)$gp
if ('try-error' %in% class(res)){
cat("\nERROR. Couldn't create graph from database. Skip thread\n")
next
}
# Skip small graphs
if(vcount(g) < MIN_LENGTH) next
if(vcount(g) == 0) {cat("\nEmpty thread. Skip\n"); next}
trees[[idx]] <- g
source('~/Documents/PhD/Thread_prediction/R/main_realdata.r')
source('~/Documents/PhD/Thread_prediction/R/main_realdata.r')
source('~/Documents/PhD/Thread_prediction/R/main_realdata.r')
source('~/Documents/PhD/Thread_prediction/R/main_realdata.r')
trees
trees <- trees[1:idx]
# Find MLE by grid search
alpha_ <- seq(0.5,5, by=0.1)
beta_ <- seq(30,100, by=5)
xy <- merge(alpha_, beta_)
like <- rep(NA, nrow(xy))
for(i in 1:nrow(xy)){
cat("\n", i, nrow(xy))
like[i] <- likelihood(c(xy[i,1], xy[i,2]), trees[[1]])
}
# plot grid
par(mfrow=c(1,1))
plot(xy[,1], xy[,2], cex=exp(like-max(like)), xlab=expression(alpha), ylab=expression(beta))
title("Grid search of MLE")
# plot grid
par(mfrow=c(1,1))
plot(xy[,1], xy[,2], cex=exp((like-max(like))/sd(abs(like))), xlab=expression(alpha), ylab=expression(beta))
title("Grid search of MLE")
# Generate graphs with MLE parameters
par(mfrow=c(3,3))
alpha_mle <- xy[which.max(like),1]
beta_mle <- xy[which.max(like),2]
for (i in seq(0,1,length=9)){
lambda <- 0
g <- gen.thread(n=200, alpha=alpha_mle, beta=beta_mle, lambda=0)
# Plot
la <- layout_with_fr(g)
plot(as.undirected(g),
layout = la,
vertex.label = "",
vertex.color = "black",
vertex.size = 1.5 + 1.5 * log( graph.strength(g), 3 ),
edge.width = 1.5,
asp=9/16,
margin=-0.15)
title(bquote(alpha ~ '=' ~ .(round(alpha_mle, digits=2)) ~ ';' ~
beta ~ '=' ~ .(round(beta_mle, digits=2)) ~ ';' ~
lambda ~ '=' ~ .(round(lambda, digits=2))
)
)
title("Graphs with MLE parameters", outer=T, line=-1)
}
#chains <- metropolis(10, trees)
# Find MLE by grid search
alpha_ <- seq(0.5,5, by=0.1)
beta_ <- seq(30,100, by=5)
xy <- merge(alpha_, beta_)
like <- rep(NA, nrow(xy))
for(i in 1:nrow(xy)){
cat("\n", i, nrow(xy))
like[i] <- likelihood(c(xy[i,1], xy[i,2]), trees[[1]])
}
like
source('~/Documents/PhD/Thread_prediction/R/main_realdata.r')
trees[[1]]
likelihood(c(xy[i,1], xy[i,2]), trees[[2]])
likelihood(c(xy[i,1], xy[i,2]), trees[[1]])
likelihood(c(xy[i,1], xy[i,2]), trees[[10]])
likelihood(c(1, 1), trees[[10]])
likelihood(c(1, 1,1), trees[[10]])
likelihood(c(1, 1,1), trees[[10]])
likelihood(c(xy[i,1], xy[i,2], 0), trees[[2]])
alpha <- 1
beta <- 1
lambda <- 0
if(class(trees) == "igraph"){
trees <- list(g)
}
trees
trees <- trees[1:40]
trees
if(class(trees) == "igraph"){
trees <- list(g)
}
trees
total.like <- 0
for(i in 1:length(trees)){
g <- trees[[i]]
parents <- parents.vector(g)
# likelihood of every parent choice
like <- 0
for (t in 2:length(parents)){
h <- depths(parents[1:(t-1)])
d <- degrees.3(parents[1:(t-1)])
#tau <- t - as.numeric(V(G)$date[i]) # how old is the post
probs <- (d+10e-5)^alpha * (h+10e-5)^beta #* taus^(-lambda)
probs <- probs/sum(probs)
like <- like + log(probs[parents[t]])
}
total.like <- total.like + like
}
total.like
warnings()
i
i <- trees[[1]]
i <- 1
g <- trees[[i]]
parents <- parents.vector(g)
parents
like <- 0
length(parents)
like <- 0
for (t in 2:length(parents)){
h <- depths(parents[1:(t-1)])
d <- degrees.3(parents[1:(t-1)])
#tau <- t - as.numeric(V(G)$date[i]) # how old is the post
probs <- (d+10e-5)^alpha * (h+10e-5)^beta #* taus^(-lambda)
probs <- probs/sum(probs)
like <- like + log(probs[parents[t]])
}
warnings()
t <- 2
h <- depths(parents[1:(t-1)])
h
d <- degrees.3(parents[1:(t-1)])
d
parents
depths(parents[1:(t-1)])
depths <- rep(0, length(parents)+1)
deppths
depths
depths[parents[i]] + 1
depths[parents[1]] + 1
depths[parents[1]]
parents[1]
parents
as.numeric(parents)
g
nodes <- order(V(g)$date)[-1] # exclude root
nodes
arents <- get.edgelist(g)[,2][nodes-1]
arents
get.edgelist(g)[,2]
get.edgelist(g)
as.numeric(get.edgelist(g))
V(g)$name
gg <- g
V(g)
as.numeric(V(g))
V(gg)$name <- as.numeric(V(g))
V(gg)$name
V(g)$name
V(gg)$ddd <- as.numeric(V(g))
V(gg)$ddd
?get.edgelist
get.edgelist(g, names=FALSE)
source('~/Documents/PhD/Thread_prediction/R/main_realdata.r')
likelihood(c(xy[i,1], xy[i,2], 0), trees[[2]])
g <- trees[[1]]
parents.vector(g)
parents <- parents.vector(g)
degrees.3(parents)
depth(parents)
depths(parents)
t <- 10
h <- depths(parents[1:(t-1)])
d <- degrees.3(parents[1:(t-1)])
h
d
probs <- (d+10e-5)^alpha * (h+10e-5)^beta #* taus^(-lambda)
probs
probs <- probs/sum(probs)
robs
probs
like <- like + log(probs[parents[t]])
like
probs[parents[t]]
parents[t]
probs[1]
log(probs[1])
like
like <- 0
h <- depths(parents[1:(t-1)])
d <- degrees.3(parents[1:(t-1)])
#tau <- t - as.numeric(V(G)$date[i]) # how old is the post
probs <- (d+10e-5)^alpha * (h+10e-5)^beta #* taus^(-lambda)
probs <- probs/sum(probs)
like <- like + log(probs[parents[t]])
like
total.like
total.like <- 0
for(i in 1:length(trees)){
g <- trees[[i]]
parents <- parents.vector(g)
# likelihood of every parent choice
like <- 0
for (t in 2:length(parents)){
h <- depths(parents[1:(t-1)])
d <- degrees.3(parents[1:(t-1)])
#tau <- t - as.numeric(V(G)$date[i]) # how old is the post
probs <- (d+10e-5)^alpha * (h+10e-5)^beta #* taus^(-lambda)
probs <- probs/sum(probs)
like <- like + log(probs[parents[t]])
}
total.like <- total.like + like
}
total.like
alpha
beta
total.like <- 0
i
g
total.like <- 0
for(i in 1:length(trees)){
g <- trees[[i]]
parents <- parents.vector(g)
# likelihood of every parent choice
like <- 0
for (t in 2:length(parents)){
cat(t)
h <- depths(parents[1:(t-1)])
d <- degrees.3(parents[1:(t-1)])
#tau <- t - as.numeric(V(G)$date[i]) # how old is the post
probs <- (d+10e-5)^alpha * (h+10e-5)^beta #* taus^(-lambda)
probs <- probs/sum(probs)
like <- like + log(probs[parents[t]])
}
total.like <- total.like + like
}
total.like
trees
trees <- trees[1:40]
total.like <- 0
for(i in 1:length(trees)){
g <- trees[[i]]
parents <- parents.vector(g)
# likelihood of every parent choice
like <- 0
for (t in 2:length(parents)){
cat(t)
h <- depths(parents[1:(t-1)])
d <- degrees.3(parents[1:(t-1)])
#tau <- t - as.numeric(V(G)$date[i]) # how old is the post
probs <- (d+10e-5)^alpha * (h+10e-5)^beta #* taus^(-lambda)
probs <- probs/sum(probs)
like <- like + log(probs[parents[t]])
}
total.like <- total.like + like
}
total.like
trees <- trees[1:(idx-1)]
trees
source('~/Documents/PhD/Thread_prediction/R/main_realdata.r')
source('~/Documents/PhD/Thread_prediction/R/main_realdata.r')
alpha_ <- seq(0.5,5, by=0.1)
beta_ <- seq(0,1, by=5)
xy <- merge(alpha_, beta_)
like <- rep(NA, nrow(xy))
for(i in 1:nrow(xy)){
cat("\n", i, nrow(xy))
like[i] <- likelihood(c(xy[i,1], xy[i,2], 0), trees[[2]])
}
like
i
likelihood(c(xy[i,1], xy[i,2], 0), trees[[2]])
params
alpha
beta
total.like <- 0
for(i in 1:length(trees)){
g <- trees[[i]]
parents <- parents.vector(g)
# likelihood of every parent choice
like <- 0
for (t in 2:length(parents)){
h <- depths(parents[1:(t-1)])
d <- degrees.3(parents[1:(t-1)])
#tau <- t - as.numeric(V(G)$date[i]) # how old is the post
probs <- (d+10e-5)^alpha * (h+10e-5)^beta #* taus^(-lambda)
probs <- probs/sum(probs)
like <- like + log(probs[parents[t]])
}
total.like <- total.like + like
}
total.like
xy[i,1], xy[i,2]
xy[i,1]
xy[i,1]xy
xy
i
nrow(xy)
i <- 1
cat("\n", i, nrow(xy))
alpha_ <- seq(0.5,5, by=0.1)
beta_ <- seq(0,1, by=5)
xy <- merge(alpha_, beta_)
like <- rep(NA, nrow(xy))
for(i in 1:nrow(xy)){
like[i] <- likelihood(c(xy[i,1], xy[i,2], 0), trees[[2]])
cat("\n", i, nrow(xy), like[i])
}
like
# plot grid
par(mfrow=c(1,1))
plot(xy[,1], xy[,2], cex=exp(like-max(like)), xlab=expression(alpha), ylab=expression(beta))
title("Grid search of MLE")
# plot grid
par(mfrow=c(1,1))
plot(xy[,1], xy[,2], cex=exp((like-max(like))/sd(abs(like))), xlab=expression(alpha), ylab=expression(beta))
title("Grid search of MLE")
trees
# Find MLE by grid search
alpha_ <- seq(0.5,5, by=0.1)
beta_ <- seq(0,1, by=5)
xy <- merge(alpha_, beta_)
like <- rep(NA, nrow(xy))
for(i in 1:nrow(xy)){
like[i] <- likelihood(c(xy[i,1], xy[i,2], 0), trees[[2]])
cat("\n", i, nrow(xy), like[i])
}
# Find MLE by grid search
alpha_ <- seq(0.5,5, by=0.1)
beta_ <- seq(0,1, by=0.1)
xy <- merge(alpha_, beta_)
like <- rep(NA, nrow(xy))
for(i in 1:nrow(xy)){
like[i] <- likelihood(c(xy[i,1], xy[i,2], 0), trees[[2]])
cat("\n", i, nrow(xy), like[i])
}
# plot grid
par(mfrow=c(1,1))
plot(xy[,1], xy[,2], cex=exp(like-max(like)), xlab=expression(alpha), ylab=expression(beta))
title("Grid search of MLE")
# plot grid
par(mfrow=c(1,1))
plot(xy[,1], xy[,2], cex=exp((like-max(like))/sd(abs(like))), xlab=expression(alpha), ylab=expression(beta))
title("Grid search of MLE")
par(mfrow=c(3,3))
alpha_mle <- xy[which.max(like),1]
beta_mle <- xy[which.max(like),2]
for (i in seq(0,1,length=9)){
lambda <- 0
g <- gen.thread(n=200, alpha=alpha_mle, beta=beta_mle, lambda=0)
# Plot
la <- layout_with_fr(g)
plot(as.undirected(g),
layout = la,
vertex.label = "",
vertex.color = "black",
vertex.size = 1.5 + 1.5 * log( graph.strength(g), 3 ),
edge.width = 1.5,
asp=9/16,
margin=-0.15)
title(bquote(alpha ~ '=' ~ .(round(alpha_mle, digits=2)) ~ ';' ~
beta ~ '=' ~ .(round(beta_mle, digits=2)) ~ ';' ~
lambda ~ '=' ~ .(round(lambda, digits=2))
)
)
title("Graphs with MLE parameters", outer=T, line=-1)
}
par(mfrow=c(1,1))
# Plot
la <- layout_with_fr(trees[[2]])
plot(as.undirected(trees[[2]]),
layout = la,
vertex.label = "",
vertex.color = "black",
vertex.size = 1.5 + 1.5 * log( graph.strength(trees[[2]]), 3 ),
edge.width = 1.5,
asp=9/16,
margin=-0.15)
title(bquote(alpha ~ '=' ~ .(round(alpha_mle, digits=2)) ~ ';' ~
beta ~ '=' ~ .(round(beta_mle, digits=2)) ~ ';' ~
lambda ~ '=' ~ .(round(lambda, digits=2))
)
)
title("Original graph", outer=T, line=-1)
for (i in seq(0,1,length=9)){
lambda <- 0
g <- gen.thread(n=200, alpha=alpha_mle, beta=beta_mle, lambda=0)
# Plot
la <- layout_with_fr(g)
plot(as.undirected(g),
layout = la,
vertex.label = "",
vertex.color = "black",
vertex.size = 1.5 + 1.5 * log( graph.strength(g), 3 ),
edge.width = 1.5,
asp=9/16,
margin=-0.15)
title(bquote(alpha ~ '=' ~ .(round(alpha_mle, digits=2)) ~ ';' ~
beta ~ '=' ~ .(round(beta_mle, digits=2)) ~ ';' ~
lambda ~ '=' ~ .(round(lambda, digits=2))
)
)
title("Graphs with MLE parameters", outer=T, line=-1)
}
trees
# Find MLE by grid search
alpha_ <- seq(0,3, by=0.1)
beta_ <- seq(0,3, by=0.1)
xy <- merge(alpha_, beta_)
like <- rep(NA, nrow(xy))
for(i in 1:nrow(xy)){
like[i] <- likelihood(c(xy[i,1], xy[i,2], 0), trees)
cat("\n", i, nrow(xy), like[i])
}
par(mfrow=c(1,1))
plot(xy[,1], xy[,2], cex=exp(like-max(like)), xlab=expression(alpha), ylab=expression(beta))
title("Grid search of MLE")
par(mfrow=c(1,1))
plot(xy[,1], xy[,2], cex=exp((like-max(like))/sd(abs(like))), xlab=expression(alpha), ylab=expression(beta))
title("Grid search of MLE")
alpha_mle <- xy[which.max(like),1]
beta_mle <- xy[which.max(like),2]
alpha_mle
beta__mle
beta_mle
for (i in seq(0,1,length=9)){
lambda <- 0
g <- gen.thread(n=200, alpha=alpha_mle, beta=beta_mle, lambda=0)
# Plot
la <- layout_with_fr(g)
plot(as.undirected(g),
layout = la,
vertex.label = "",
vertex.color = "black",
vertex.size = 1.5 + 1.5 * log( graph.strength(g), 3 ),
edge.width = 1.5,
asp=9/16,
margin=-0.15)
title(bquote(alpha ~ '=' ~ .(round(alpha_mle, digits=2)) ~ ';' ~
beta ~ '=' ~ .(round(beta_mle, digits=2)) ~ ';' ~
lambda ~ '=' ~ .(round(lambda, digits=2))
)
)
title("Graphs with MLE parameters", outer=T, line=-1)
}
